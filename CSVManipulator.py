import csv

class CSVManipulator:
    def __init__(self, csv_file, write_headers=False):
        self.csvFile = csv_file
        if(write_headers):
            order = ["name", "details", "published date", "updated date", "cvss score",
                     "vulnerability types", "cwd ID", "products affected"]
            writeLine(self.csvFile, order)

    def writeCVEVulnerability(self,
                              csv_file=None,
                              name=None,
                              details=None,
                              publish_date=None,
                              update_date=None,
                              cvss_score=None,
                              vuln_types=None,
                              cwd_ID=None,
                              products=None):
        if(not csv_file):
            csv_file = self.csvFile
        writeLine(csv_file, [name, details, publish_date, update_date, cvss_score,
                             vuln_types, cwd_ID, products])


    def getVulnerabilities(self,
                              csv_file=None,
                              name=None,
                              details=None,
                              publish_date=None,
                              update_date=None,
                              cvss_score=None,
                              vuln_types=None,
                              cwd_ID=None,
                              products=None):

        if(not csv_file):
            csv_file = self.csvFile
        vulnerabilities = []
        vulnReader = getReader(csv_file)
        for row in vulnReader:
            if(lineMatches(row, name, details, publish_date, update_date,
                           cvss_score, vuln_types, cwd_ID, products)):
                print(row)
                vulnerabilities.append(row)
        return vulnerabilities


    def getAllVendors(self, csv_file=None, print=True):
        if(not csv_file):
            csv_file = self.csvFile
        vendors = dict()
        vulnReader = getReader(csv_file)
        next(vulnReader)
        for row in vulnReader:
            products = row[7].split("/")
            for product in products:
                if(product):
                    if(len(product.split("@")) > 1):
                        vendors = addToCountDictionary(vendors, product.split("@")[1])
        if(print):
            print(vendors)
        return vendors


    def getVulnerabilitiesByVendor(self, vendor, csv_file=None, print=True):
        if(not csv_file):
            csv_file = self.csvFile
        vulnerabilities = []
        vulnReader = getReader(csv_file)
        next(vulnReader)
        for row in vulnReader:
            if(vendor in row[7]):
                if(print):
                    print(row)
                vulnerabilities.append(row)
        return vulnerabilities


    def vulnerabilitiesWithoutVendor(self, vendors, csv_file=None, print=True):
        if(not csv_file):
            csv_file = self.csvFile
        vulnerabilities = []
        vulnReader = getReader(csv_file)
        next(vulnReader)
        for row in vulnReader:
            noVendors = True
            for vendor in vendors:
                if(vendor in row[7]):
                    noVendors = False
            if(noVendors):
                if(print):
                    print(row)
                vulnerabilities.append(row)

        return vulnerabilities



def addToCountDictionary(dict, key):
    if(key in dict):
        dict[key] = dict[key] + 1
    else:
        dict[key] = 1
    return dict



def getReader(csv_file):
    csvfile = open(csv_file, "r", newline = '')
    vulnReader = csv.reader(csvfile, delimiter='|')
    return vulnReader


def writeLine(csv_file, contents):
    with open(csv_file, "a", newline='') as csvfile:
        vulnWriter = csv.writer(csvfile, delimiter='|')
        vulnWriter.writerow(contents)

def lineMatches(row, name, details, publish_date, update_date, cvss_score, vuln_types, cwd_ID, products):
    toMatch = [name, details, publish_date, update_date, cvss_score, vuln_types, cwd_ID, products]
    for i in range(len(toMatch)):
        if(toMatch[i]):
            if(toMatch[i] != row[i]):
                return False
    return True
