import os
import subprocess


class NormalProgramCreator():
    def __init__(self):
        pass


    def createDetailsFromList(self, programList=None, directory="/usr/bin/", detailsDirectory="~/MemoryCorruptionDataset/normalPrograms/"):
        detailsDirectory = os.path.expanduser(detailsDirectory)
        if(not os.path.isdir(detailsDirectory)):
            os.mkdir(detailsDirectory)
        programs = list(filter(lambda x: checkProgramElf(directory + x), programList))
        programDict = createProgramDict(programList)
        print(programDict)
        for program in programs:
            print("Getting", program)
            programDirectory = detailsDirectory + program + "/"
            if(not os.path.isdir(programDirectory)):
                os.mkdir(programDirectory)

            textfile = os.path.expanduser(detailsDirectory) + program + "/details.txt"
            f = open(textfile, "w+")
            version = ""
            if(program in programDict):
                if(programDict[program] == 'madison'):
                    proc = subprocess.Popen(['apt-cache', 'madison', program], stdout=subprocess.PIPE)
                    version = proc.communicate()[0].decode('utf-8').split('|')[1].strip()
                else:
                    proc = subprocess.Popen([program, programDict[program]], stdout=subprocess.PIPE)
                    version = proc.communicate()[0].decode('utf-8')
            f.write("location: " + directory + program + "\nversion: " + version)
            f.close()

            #proc.kill()

    def printELFList(self, directory="/usr/bin/"):
        elflist = (list(filter(lambda x: checkProgramElf('/usr/bin/' + x), os.listdir(directory))))
        return elflist


def checkProgramElf(program):
    proc = subprocess.Popen(['file', program], stdout=subprocess.PIPE)
    fileDetails =  proc.communicate()[0].decode('utf-8')
    if('ELF' in fileDetails):
        return True
    return False

def createProgramDict(plist, txtfile='~/MemoryCorruptionDataset/normalProgramList.txt'):
    pdict = dict()

    f = open(os.path.expanduser(txtfile), 'r')
    lines = list(map(lambda x: x.strip(), f.readlines()))
    for line in lines:
        program = line.split("//")[0].strip()
        command = line.split("//")[1].strip()
        if(command):
            pdict[program] = command
    f.close()
    return pdict
