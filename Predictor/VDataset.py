import torch
from torch.utils import data
from FextractorPreprocessor import FextractorPreprocessor
import numpy as np

#custom dataset class that inherits pytorch dataset
class VDataset(data.Dataset):
    def __init__(self, data, features):
        self.data = data
        self.features = features


    def __len__(self):
        return len(self.data.keys())


    def __getitem__(self, index):
        #vstatic = torch.from_numpy(self.data[index].X['vstatic'].astype(np.float32)) if('vstatic' in self.data[index].X) else torch.empty(0)
        label = self.data[index].label
        #vdynamic = torch.from_numpy(self.data[index].X['vdynamic'].astype(np.float32)) if('vdynamic' in self.data[index].X) else torch.empty(0)
        #vconcat = torch.from_numpy(self.data[index].X['vconcat'].astype(np.float32)) if('vconcat' in self.data[index].X) else torch.empty(0)
        vectors = []
        for feature in self.features:
            if('word2vec' in feature or 'glove' in feature):
                vectors.append(torch.from_numpy(self.data[index].X[feature].astype(np.float32)).unsqueeze(0))
            else:
                vectors.append(torch.from_numpy(self.data[index].X[feature].astype(np.float32)))
        for i in range(len(self.features), 4):
            vectors.append(torch.empty(0))
        return vectors, label, self.data[index].file
