import subprocess, re, os


#taken from VDiscover
conditional_flow = ["jo", "jno", "jne", "js", "jns", "je",
                             "jz", "jnz", "jb", "jnae", "jc",
                             "jnb", "jae", "jnc", "jbe", "jna",
                             "ja", "jnbe", "jl", "jnge", "jge",
                             "jnl", "jle", "jng", "jg", "jnle",
                             "jp", "jpe", "jnp", "jpo", "jcxz", "jecxz"]

unconditional_flow = ["ret", "jmp", "call", "retq", "jmp", "callq"]

class CFG:
    def __init__(self, program):
        self.program = program
        self.code_blocks = dict()
        self.block_count = 0
        self.inscount = 0
        self.plt_address_to_name = dict

        self.plt_address_to_name = dict()
        self.code_blocks = dict()

        self.instructions = None

        self.cfg = list()
        self.edges = None

    def populate_plt(self):
        pltout = str(subprocess.Popen(['objdump', '-d', '-j', '.plt', self.program], stdout=subprocess.PIPE).communicate()[0].decode()).split("\n")
        for line in pltout:
            if("@plt" in line):
                address = (line.split()[0].lstrip("0").strip())
                name = re.findall('<\S+@', line)[0].replace("<", "").replace("@", "")
                self.plt_address_to_name[address] = name

    def get_instructions(self):
        cmd = ['objdump', '-d', '-j', '.text', self.program]
        self.instructions = str(subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()[0].decode()).split("\n")

    def add_code_blocks(self):
        for idx, line in enumerate (self.instructions):
            line = line.replace("repz ", "")
            line = line.replace("rep ", "")

            cols = line.split("\t")
            instruction_address = cols[0].replace(":", "").replace(" ", "")
            self.code_blocks[instruction_address] = self.block_count
            if(len(cols) > 2):
                flow_instructions = len(list(filter(lambda x: x in cols[2], conditional_flow + unconditional_flow)))
                if(flow_instructions > 0):
                    self.block_count += 1

    def create_cfg(self):
        self.edges = 0
        self.populate_plt()
        self.get_instructions()
        self.add_code_blocks()

        for idx, line in enumerate (self.instructions):#
            line = line.replace("repz ", "")
            line = line.replace("rep ", "")


            cols = line.split("\t")
            instruction_address = cols[0].replace(":", "").replace(" ", "")
            if(len(cols) > 2):
                flow_instructions = len(list(filter(lambda x: x in cols[2], conditional_flow + unconditional_flow)))
                if(flow_instructions):
                    #this is return function
                    if(len(cols[2].split()) < 2):
                        continue
                    dest = cols[2].split()[1]
                    instruction = cols[2].split()[0].strip()
                    if(not dest in self.plt_address_to_name):
                        #conditional creates two edges as two possible paths
                        if(instruction in conditional_flow):
                            self.edges += 2
                            continue
                        self.edges += 1
                        continue

                    if(instruction in conditional_flow):
                        #if plt call then extra edge back from call
                        self.edges += 3
                        #extra node for call
                        self.block_count += 1
                    else:
                        self.edges += 2
                        self.block_count += 1
                    self.cfg.append((self.code_blocks[instruction_address], self.plt_address_to_name[dest]))
        return self.edges, self.block_count, self.cfg

    def save_to_file(self, directory):
        with open(os.path.join(directory,self.program.split("/")[-1]+"_cfg.txt"), 'w') as f:
            f.write("edges:"+str(self.edges)+"\n")
            f.write("nodes:"+str(self.block_count)+"\n")
            f.write(str(self.cfg))


def get_vm_data(dir):
    for dfile in (os.listdir(os.path.expanduser(dir))):
        print("Getting: ", dfile)
        if(dfile != 'hhvm'):
            with open(os.path.expanduser(dir + "/" + dfile + "/details.txt")) as file:
                prog = list(map(lambda x: x.strip().split(":")[1].strip(), list(filter(lambda x: "location" in x, file))))[0]
                progname = prog.split("/")[-1]
                print("Getting ", dfile)
                cfg = CFG(prog)
                cfg.create_cfg()
                cfg.save_to_file(os.path.expanduser('~/DeepVulnerabilityPredictor/data/cfg'))

get_vm_data('~/DeepVulnerabilityPredictor/MemoryCorruptionDataset/normalPrograms/')
get_vm_data('~/DeepVulnerabilityPredictor/MemoryCorruptionDataset/programs/')

# cfg = CFG('/home/dominic/DeepVulnerabilityPredictor/MemoryCorruptionDataset/thesisExampleFiles/overflow')
# cfg.create_cfg()
# cfg.save_to_file(os.path.expanduser('~/buffy/cfg'))
# cfg = CFG('/home/dominic/DeepVulnerabilityPredictor/MemoryCorruptionDataset/thesisExampleFiles/check')
# cfg.create_cfg()
# cfg.save_to_file(os.path.expanduser('~/buffy/cfg'))
