import angr
import time
import logging
import subprocess
import os

class AngrAnalyser:
    def __init__(self, program):
        self.clib = list()
        self.cfg = self.generatecfg(os.path.expanduser(program))
        self.program = program


    def generatecfg(self, project):
        prog = angr.Project(project, load_options={'auto_load_libs': False})

        start = time.time()
        cfg = prog.analyses.CFG(fail_fast=True)
        end = time.time()
        obj = prog.loader.main_object
        self.clib = (list(obj.plt))
        print("time taken: ", end-start)
        print(cfg)
        print("It has %d nodes and %d edges" % (len(cfg.graph.nodes()), len(cfg.graph.edges())))
        return cfg


    def get_nodes(self):
        return cfg.graph.nodes()


    def get_node_edges(self, program):
        totaldict, indict, outdict = self.nodeEdges(self.cfg)

        return totaldict, indict, outdict

    def get_clib_node_edges(self):
        edges = self.cfg.graph.edges()
        indict = dict()
        outdict = dict()

        for edge in edges:
            enodes = nodes_from_edge(edge)
            if(enodes[0] in self.clib):
                increaseDict(outdict, enodes[0])
            if(enodes[1] in self.clib):
                increaseDict(indict, enodes[1])

        totaldict =  {**indict, **outdict}
        return totaldict, indict, outdict

    def write_clib_nodes_edges_to_file(self, outdir):
        totaldict, indict, outdict = self.get_clib_node_edges()
        total_clib = set()
        total_clib.update(list(totaldict.keys()))
        if(os.path.exists(os.path.expanduser(outdir + self.program.split("/")[-1] + "_angr"))):
            os.remove(os.path.expanduser(outdir + self.program.split("/")[-1] + "_angr"))
        with open(os.path.expanduser(outdir + self.program.split("/")[-1] + "_angr"), 'w') as wfile:
            for func in total_clib:
                ine = 0 if not(func in indict) else indict[func]
                oute = 0 if not(func in outdict) else outdict[func]
                wfile.write(func + " " + str(ine) + " " + str(oute) + "\n")

def increaseDict(indict, key):
    if(key in indict):
        indict[key] = indict[key] + 1
    else:
        indict[key] = 1


def nodes_from_edge(edge):
    enodes = str(edge).split(", ")
    enodes = list(map(lambda x: x.split("[")[0].split(" ")[1], enodes))
    return enodes


def analyse_directory(dir, outdir):
    for dfile in (os.listdir(os.path.expanduser(dir))):
        print("Getting: ", dfile)
        with open(os.path.expanduser(dir + "/" + dfile + "/details.txt")) as file:
            prog = list(map(lambda x: x.strip().split(":")[1].strip(), list(filter(lambda x: "location" in x, file))))[0]
            progname = prog.split("/")[-1]
            if(not os.path.exists(os.path.expanduser("~/DeepVulnerabilityPredictor/data/angr/" + progname + "_angr"))):
                aa = AngrAnalyser(prog)
                aa.write_clib_nodes_edges_to_file(outdir)

analyse_directory("~/DeepVulnerabilityPredictor/MemoryCorruptionDataset/normalPrograms", "~/DeepVulnerabilityPredictor/data/angr/")
analyse_directory("~/DeepVulnerabilityPredictor/MemoryCorruptionDataset/programs", "~/DeepVulnerabilityPredictor/data/angr/")

#prog = '/usr/bin/nohup'
#aa = AngrAnalyser(prog)
#print(aa.write_clib_nodes_edges_to_file())

#totaldict, indict, outdict = aa.get_clib_node_edges()
#print(sorted(totaldict.items(), key=lambda x: x[1], reverse=True))
#startt = time.time()
# endd = time.time()
# print("angr time: ", endd - startt)
#
# startt = time.time()
# subprocess.run(['fextractor', '--static', prog])
# endd = time.time()
# print("fextractor time: ", endd - startt)
