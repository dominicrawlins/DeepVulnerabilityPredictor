import angr
import time
import logging

class AngrAnalyser:
    def __init__(self):
        pass


    def nodeEdgeCount(self, program):

        cfg = generatecfg(program)

        totaldict, indict, outdict = nodeEdges(cfg)

        return totaldict, indict, outdict






def generatecfg(project):
    prog = angr.Project(project, load_options={'auto_load_libs': False})

    start = time.time()
    cfg = prog.analyses.CFG(fail_fast=True)
    end = time.time()
    print("time taken: ", end-start)
    print(cfg)
    print("It has %d nodes and %d edges" % (len(cfg.graph.nodes()), len(cfg.graph.edges())))
    return cfg


def increaseDict(indict, key):
    if(key in indict):
        indict[key] = indict[key] + 1
    else:
        indict[key] = 1


def nodesFromEdge(edge):
    enodes = str(edge).split(", ")
    enodes = list(map(lambda x: x.split("[")[0].split(" ")[1], enodes))
    return enodes

def nodeEdges(cfg):
    edges = cfg.graph.edges()
    indict = dict()
    outdict = dict()

    for edge in edges:
        enodes = nodesFromEdge(edge)
        increaseDict(outdict, enodes[0])
        increaseDict(indict, enodes[1])

    totaldict =  {**indict, **outdict}
    print(sorted(totaldict.items(), key=lambda x: x[1], reverse=True))

    return totaldict, indict, outdict

cfg = generatecfg('/bin/grep')

nodes = cfg.graph.nodes()

nodeEdges(cfg)
